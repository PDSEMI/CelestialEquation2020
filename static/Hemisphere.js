"use strict";



function main() {

  var Hemisphere = {
    vertex : [
    200.0 ,0 ,0.0 , 
    199.24 ,0 ,17.43 , 
    199.24 ,0 ,17.43 , 
    196.96 ,0 ,34.73 , 
    196.96 ,0 ,34.73 , 
    193.19 ,0 ,51.76 , 
    193.19 ,0 ,51.76 , 
    187.94 ,0 ,68.4 , 
    187.94 ,0 ,68.4 , 
    181.26 ,0 ,84.52 , 
    181.26 ,0 ,84.52 , 
    173.21 ,0 ,100.0 , 
    173.21 ,0 ,100.0 , 
    163.83 ,0 ,114.72 , 
    163.83 ,0 ,114.72 , 
    153.21 ,0 ,128.56 , 
    153.21 ,0 ,128.56 , 
    141.42 ,0 ,141.42 , 
    141.42 ,0 ,141.42 , 
    128.56 ,0 ,153.21 , 
    128.56 ,0 ,153.21 , 
    114.72 ,0 ,163.83 , 
    114.72 ,0 ,163.83 , 
    100.0 ,0 ,173.21 , 
    100.0 ,0 ,173.21 , 
    84.52 ,0 ,181.26 , 
    84.52 ,0 ,181.26 , 
    68.4 ,0 ,187.94 , 
    68.4 ,0 ,187.94 , 
    51.76 ,0 ,193.19 , 
    51.76 ,0 ,193.19 , 
    34.73 ,0 ,196.96 , 
    34.73 ,0 ,196.96 , 
    17.43 ,0 ,199.24 , 
    17.43 ,0 ,199.24 , 
    0.0 ,0 ,200.0 , 
    0.0 ,0 ,200.0 , 
    -17.43 ,0 ,199.24 , 
    -17.43 ,0 ,199.24 , 
    -34.73 ,0 ,196.96 , 
    -34.73 ,0 ,196.96 , 
    -51.76 ,0 ,193.19 , 
    -51.76 ,0 ,193.19 , 
    -68.4 ,0 ,187.94 , 
    -68.4 ,0 ,187.94 , 
    -84.52 ,0 ,181.26 , 
    -84.52 ,0 ,181.26 , 
    -100.0 ,0 ,173.21 , 
    -100.0 ,0 ,173.21 , 
    -114.72 ,0 ,163.83 , 
    -114.72 ,0 ,163.83 , 
    -128.56 ,0 ,153.21 , 
    -128.56 ,0 ,153.21 , 
    -141.42 ,0 ,141.42 , 
    -141.42 ,0 ,141.42 , 
    -153.21 ,0 ,128.56 , 
    -153.21 ,0 ,128.56 , 
    -163.83 ,0 ,114.72 , 
    -163.83 ,0 ,114.72 , 
    -173.21 ,0 ,100.0 , 
    -173.21 ,0 ,100.0 , 
    -181.26 ,0 ,84.52 , 
    -181.26 ,0 ,84.52 , 
    -187.94 ,0 ,68.4 , 
    -187.94 ,0 ,68.4 , 
    -193.19 ,0 ,51.76 , 
    -193.19 ,0 ,51.76 , 
    -196.96 ,0 ,34.73 , 
    -196.96 ,0 ,34.73 , 
    -199.24 ,0 ,17.43 , 
    -199.24 ,0 ,17.43 , 
    -200.0 ,0 ,0.0 , 
    -200.0 ,0 ,0.0 , 
    -199.24 ,0 ,-17.43 , 
    -199.24 ,0 ,-17.43 , 
    -196.96 ,0 ,-34.73 , 
    -196.96 ,0 ,-34.73 , 
    -193.19 ,0 ,-51.76 , 
    -193.19 ,0 ,-51.76 , 
    -187.94 ,0 ,-68.4 , 
    -187.94 ,0 ,-68.4 , 
    -181.26 ,0 ,-84.52 , 
    -181.26 ,0 ,-84.52 , 
    -173.21 ,0 ,-100.0 , 
    -173.21 ,0 ,-100.0 , 
    -163.83 ,0 ,-114.72 , 
    -163.83 ,0 ,-114.72 , 
    -153.21 ,0 ,-128.56 , 
    -153.21 ,0 ,-128.56 , 
    -141.42 ,0 ,-141.42 , 
    -141.42 ,0 ,-141.42 , 
    -128.56 ,0 ,-153.21 , 
    -128.56 ,0 ,-153.21 , 
    -114.72 ,0 ,-163.83 , 
    -114.72 ,0 ,-163.83 , 
    -100.0 ,0 ,-173.21 , 
    -100.0 ,0 ,-173.21 , 
    -84.52 ,0 ,-181.26 , 
    -84.52 ,0 ,-181.26 , 
    -68.4 ,0 ,-187.94 , 
    -68.4 ,0 ,-187.94 , 
    -51.76 ,0 ,-193.19 , 
    -51.76 ,0 ,-193.19 , 
    -34.73 ,0 ,-196.96 , 
    -34.73 ,0 ,-196.96 , 
    -17.43 ,0 ,-199.24 , 
    -17.43 ,0 ,-199.24 , 
    -0.0 ,0 ,-200.0 , 
    -0.0 ,0 ,-200.0 , 
    17.43 ,0 ,-199.24 , 
    17.43 ,0 ,-199.24 , 
    34.73 ,0 ,-196.96 , 
    34.73 ,0 ,-196.96 , 
    51.76 ,0 ,-193.19 , 
    51.76 ,0 ,-193.19 , 
    68.4 ,0 ,-187.94 , 
    68.4 ,0 ,-187.94 , 
    84.52 ,0 ,-181.26 , 
    84.52 ,0 ,-181.26 , 
    100.0 ,0 ,-173.21 , 
    100.0 ,0 ,-173.21 , 
    114.72 ,0 ,-163.83 , 
    114.72 ,0 ,-163.83 , 
    128.56 ,0 ,-153.21 , 
    128.56 ,0 ,-153.21 , 
    141.42 ,0 ,-141.42 , 
    141.42 ,0 ,-141.42 , 
    153.21 ,0 ,-128.56 , 
    153.21 ,0 ,-128.56 , 
    163.83 ,0 ,-114.72 , 
    163.83 ,0 ,-114.72 , 
    173.21 ,0 ,-100.0 , 
    173.21 ,0 ,-100.0 , 
    181.26 ,0 ,-84.52 , 
    181.26 ,0 ,-84.52 , 
    187.94 ,0 ,-68.4 , 
    187.94 ,0 ,-68.4 , 
    193.19 ,0 ,-51.76 , 
    193.19 ,0 ,-51.76 , 
    196.96 ,0 ,-34.73 , 
    196.96 ,0 ,-34.73 , 
    199.24 ,0 ,-17.43 , 
    199.24 ,0 ,-17.43 , 
    200.0 ,0 ,-0.0 , 
    200.0 ,0.0 ,0.0 , 
    199.24 ,17.43 ,0.0 , 
    199.24 ,17.43 ,0.0 , 
    196.96 ,34.73 ,0.0 , 
    196.96 ,34.73 ,0.0 , 
    193.19 ,51.76 ,0.0 , 
    193.19 ,51.76 ,0.0 , 
    187.94 ,68.4 ,0.0 , 
    187.94 ,68.4 ,0.0 , 
    181.26 ,84.52 ,0.0 , 
    181.26 ,84.52 ,0.0 , 
    173.21 ,100.0 ,0.0 , 
    173.21 ,100.0 ,0.0 , 
    163.83 ,114.72 ,0.0 , 
    163.83 ,114.72 ,0.0 , 
    153.21 ,128.56 ,0.0 , 
    153.21 ,128.56 ,0.0 , 
    141.42 ,141.42 ,0.0 , 
    141.42 ,141.42 ,0.0 , 
    128.56 ,153.21 ,0.0 , 
    128.56 ,153.21 ,0.0 , 
    114.72 ,163.83 ,0.0 , 
    114.72 ,163.83 ,0.0 , 
    100.0 ,173.21 ,0.0 , 
    100.0 ,173.21 ,0.0 , 
    84.52 ,181.26 ,0.0 , 
    84.52 ,181.26 ,0.0 , 
    68.4 ,187.94 ,0.0 , 
    68.4 ,187.94 ,0.0 , 
    51.76 ,193.19 ,0.0 , 
    51.76 ,193.19 ,0.0 , 
    34.73 ,196.96 ,0.0 , 
    34.73 ,196.96 ,0.0 , 
    17.43 ,199.24 ,0.0 , 
    17.43 ,199.24 ,0.0 , 
    0.0 ,200.0 ,0.0 , 
    173.21 ,0.0 ,100.0 , 
    172.55 ,17.43 ,99.62 , 
    172.55 ,17.43 ,99.62 , 
    170.57 ,34.73 ,98.48 , 
    170.57 ,34.73 ,98.48 , 
    167.31 ,51.76 ,96.59 , 
    167.31 ,51.76 ,96.59 , 
    162.76 ,68.4 ,93.97 , 
    162.76 ,68.4 ,93.97 , 
    156.98 ,84.52 ,90.63 , 
    156.98 ,84.52 ,90.63 , 
    150.0 ,100.0 ,86.6 , 
    150.0 ,100.0 ,86.6 , 
    141.88 ,114.72 ,81.91 , 
    141.88 ,114.72 ,81.91 , 
    132.68 ,128.56 ,76.6 , 
    132.68 ,128.56 ,76.6 , 
    122.47 ,141.42 ,70.71 , 
    122.47 ,141.42 ,70.71 , 
    111.34 ,153.21 ,64.28 , 
    111.34 ,153.21 ,64.28 , 
    99.35 ,163.83 ,57.36 , 
    99.35 ,163.83 ,57.36 , 
    86.6 ,173.21 ,50.0 , 
    86.6 ,173.21 ,50.0 , 
    73.2 ,181.26 ,42.26 , 
    73.2 ,181.26 ,42.26 , 
    59.24 ,187.94 ,34.2 , 
    59.24 ,187.94 ,34.2 , 
    44.83 ,193.19 ,25.88 , 
    44.83 ,193.19 ,25.88 , 
    30.08 ,196.96 ,17.36 , 
    30.08 ,196.96 ,17.36 , 
    15.09 ,199.24 ,8.71 , 
    15.09 ,199.24 ,8.71 , 
    0.0 ,200.0 ,0.0 , 
    100.0 ,0.0 ,173.21 , 
    99.62 ,17.43 ,172.55 , 
    99.62 ,17.43 ,172.55 , 
    98.48 ,34.73 ,170.57 , 
    98.48 ,34.73 ,170.57 , 
    96.6 ,51.76 ,167.31 , 
    96.6 ,51.76 ,167.31 , 
    93.97 ,68.4 ,162.76 , 
    93.97 ,68.4 ,162.76 , 
    90.63 ,84.52 ,156.98 , 
    90.63 ,84.52 ,156.98 , 
    86.61 ,100.0 ,150.0 , 
    86.61 ,100.0 ,150.0 , 
    81.92 ,114.72 ,141.88 , 
    81.92 ,114.72 ,141.88 , 
    76.61 ,128.56 ,132.68 , 
    76.61 ,128.56 ,132.68 , 
    70.71 ,141.42 ,122.47 , 
    70.71 ,141.42 ,122.47 , 
    64.28 ,153.21 ,111.34 , 
    64.28 ,153.21 ,111.34 , 
    57.36 ,163.83 ,99.35 , 
    57.36 ,163.83 ,99.35 , 
    50.0 ,173.21 ,86.6 , 
    50.0 ,173.21 ,86.6 , 
    42.26 ,181.26 ,73.2 , 
    42.26 ,181.26 ,73.2 , 
    34.2 ,187.94 ,59.24 , 
    34.2 ,187.94 ,59.24 , 
    25.88 ,193.19 ,44.83 , 
    25.88 ,193.19 ,44.83 , 
    17.37 ,196.96 ,30.08 , 
    17.37 ,196.96 ,30.08 , 
    8.72 ,199.24 ,15.09 , 
    8.72 ,199.24 ,15.09 , 
    0.0 ,200.0 ,0.0 , 
    0.0 ,0.0 ,200.0 , 
    0.0 ,17.43 ,199.24 , 
    0.0 ,17.43 ,199.24 , 
    0.0 ,34.73 ,196.96 , 
    0.0 ,34.73 ,196.96 , 
    0.0 ,51.76 ,193.19 , 
    0.0 ,51.76 ,193.19 , 
    0.0 ,68.4 ,187.94 , 
    0.0 ,68.4 ,187.94 , 
    0.0 ,84.52 ,181.26 , 
    0.0 ,84.52 ,181.26 , 
    0.0 ,100.0 ,173.21 , 
    0.0 ,100.0 ,173.21 , 
    0.0 ,114.72 ,163.83 , 
    0.0 ,114.72 ,163.83 , 
    0.0 ,128.56 ,153.21 , 
    0.0 ,128.56 ,153.21 , 
    0.0 ,141.42 ,141.42 , 
    0.0 ,141.42 ,141.42 , 
    0.0 ,153.21 ,128.56 , 
    0.0 ,153.21 ,128.56 , 
    0.0 ,163.83 ,114.72 , 
    0.0 ,163.83 ,114.72 , 
    0.0 ,173.21 ,100.0 , 
    0.0 ,173.21 ,100.0 , 
    0.0 ,181.26 ,84.52 , 
    0.0 ,181.26 ,84.52 , 
    0.0 ,187.94 ,68.4 , 
    0.0 ,187.94 ,68.4 , 
    0.0 ,193.19 ,51.76 , 
    0.0 ,193.19 ,51.76 , 
    0.0 ,196.96 ,34.73 , 
    0.0 ,196.96 ,34.73 , 
    0.0 ,199.24 ,17.43 , 
    0.0 ,199.24 ,17.43 , 
    0.0 ,200.0 ,0.0 , 
    -100.0 ,0.0 ,173.21 , 
    -99.62 ,17.43 ,172.55 , 
    -99.62 ,17.43 ,172.55 , 
    -98.48 ,34.73 ,170.57 , 
    -98.48 ,34.73 ,170.57 , 
    -96.59 ,51.76 ,167.31 , 
    -96.59 ,51.76 ,167.31 , 
    -93.97 ,68.4 ,162.76 , 
    -93.97 ,68.4 ,162.76 , 
    -90.63 ,84.52 ,156.98 , 
    -90.63 ,84.52 ,156.98 , 
    -86.6 ,100.0 ,150.0 , 
    -86.6 ,100.0 ,150.0 , 
    -81.91 ,114.72 ,141.88 , 
    -81.91 ,114.72 ,141.88 , 
    -76.6 ,128.56 ,132.68 , 
    -76.6 ,128.56 ,132.68 , 
    -70.71 ,141.42 ,122.47 , 
    -70.71 ,141.42 ,122.47 , 
    -64.28 ,153.21 ,111.34 , 
    -64.28 ,153.21 ,111.34 , 
    -57.36 ,163.83 ,99.35 , 
    -57.36 ,163.83 ,99.35 , 
    -50.0 ,173.21 ,86.6 , 
    -50.0 ,173.21 ,86.6 , 
    -42.26 ,181.26 ,73.2 , 
    -42.26 ,181.26 ,73.2 , 
    -34.2 ,187.94 ,59.24 , 
    -34.2 ,187.94 ,59.24 , 
    -25.88 ,193.19 ,44.83 , 
    -25.88 ,193.19 ,44.83 , 
    -17.36 ,196.96 ,30.08 , 
    -17.36 ,196.96 ,30.08 , 
    -8.71 ,199.24 ,15.09 , 
    -8.71 ,199.24 ,15.09 , 
    -0.0 ,200.0 ,0.0 , 
    -173.21 ,0.0 ,100.0 , 
    -172.55 ,17.43 ,99.62 , 
    -172.55 ,17.43 ,99.62 , 
    -170.57 ,34.73 ,98.48 , 
    -170.57 ,34.73 ,98.48 , 
    -167.31 ,51.76 ,96.59 , 
    -167.31 ,51.76 ,96.59 , 
    -162.76 ,68.4 ,93.97 , 
    -162.76 ,68.4 ,93.97 , 
    -156.98 ,84.52 ,90.63 , 
    -156.98 ,84.52 ,90.63 , 
    -150.0 ,100.0 ,86.6 , 
    -150.0 ,100.0 ,86.6 , 
    -141.88 ,114.72 ,81.91 , 
    -141.88 ,114.72 ,81.91 , 
    -132.68 ,128.56 ,76.6 , 
    -132.68 ,128.56 ,76.6 , 
    -122.47 ,141.42 ,70.71 , 
    -122.47 ,141.42 ,70.71 , 
    -111.34 ,153.21 ,64.28 , 
    -111.34 ,153.21 ,64.28 , 
    -99.35 ,163.83 ,57.36 , 
    -99.35 ,163.83 ,57.36 , 
    -86.6 ,173.21 ,50.0 , 
    -86.6 ,173.21 ,50.0 , 
    -73.2 ,181.26 ,42.26 , 
    -73.2 ,181.26 ,42.26 , 
    -59.24 ,187.94 ,34.2 , 
    -59.24 ,187.94 ,34.2 , 
    -44.83 ,193.19 ,25.88 , 
    -44.83 ,193.19 ,25.88 , 
    -30.08 ,196.96 ,17.36 , 
    -30.08 ,196.96 ,17.36 , 
    -15.09 ,199.24 ,8.71 , 
    -15.09 ,199.24 ,8.71 , 
    -0.0 ,200.0 ,0.0 , 
    -200.0 ,0.0 ,0.0 , 
    -199.24 ,17.43 ,0.0 , 
    -199.24 ,17.43 ,0.0 , 
    -196.96 ,34.73 ,0.0 , 
    -196.96 ,34.73 ,0.0 , 
    -193.19 ,51.76 ,0.0 , 
    -193.19 ,51.76 ,0.0 , 
    -187.94 ,68.4 ,0.0 , 
    -187.94 ,68.4 ,0.0 , 
    -181.26 ,84.52 ,0.0 , 
    -181.26 ,84.52 ,0.0 , 
    -173.21 ,100.0 ,0.0 , 
    -173.21 ,100.0 ,0.0 , 
    -163.83 ,114.72 ,0.0 , 
    -163.83 ,114.72 ,0.0 , 
    -153.21 ,128.56 ,0.0 , 
    -153.21 ,128.56 ,0.0 , 
    -141.42 ,141.42 ,0.0 , 
    -141.42 ,141.42 ,0.0 , 
    -128.56 ,153.21 ,0.0 , 
    -128.56 ,153.21 ,0.0 , 
    -114.72 ,163.83 ,0.0 , 
    -114.72 ,163.83 ,0.0 , 
    -100.0 ,173.21 ,0.0 , 
    -100.0 ,173.21 ,0.0 , 
    -84.52 ,181.26 ,0.0 , 
    -84.52 ,181.26 ,0.0 , 
    -68.4 ,187.94 ,0.0 , 
    -68.4 ,187.94 ,0.0 , 
    -51.76 ,193.19 ,0.0 , 
    -51.76 ,193.19 ,0.0 , 
    -34.73 ,196.96 ,0.0 , 
    -34.73 ,196.96 ,0.0 , 
    -17.43 ,199.24 ,0.0 , 
    -17.43 ,199.24 ,0.0 , 
    -0.0 ,200.0 ,0.0 , 
    -173.21 ,0.0 ,-100.0 , 
    -172.55 ,17.43 ,-99.62 , 
    -172.55 ,17.43 ,-99.62 , 
    -170.57 ,34.73 ,-98.48 , 
    -170.57 ,34.73 ,-98.48 , 
    -167.31 ,51.76 ,-96.6 , 
    -167.31 ,51.76 ,-96.6 , 
    -162.76 ,68.4 ,-93.97 , 
    -162.76 ,68.4 ,-93.97 , 
    -156.98 ,84.52 ,-90.63 , 
    -156.98 ,84.52 ,-90.63 , 
    -150.0 ,100.0 ,-86.61 , 
    -150.0 ,100.0 ,-86.61 , 
    -141.88 ,114.72 ,-81.92 , 
    -141.88 ,114.72 ,-81.92 , 
    -132.68 ,128.56 ,-76.61 , 
    -132.68 ,128.56 ,-76.61 , 
    -122.47 ,141.42 ,-70.71 , 
    -122.47 ,141.42 ,-70.71 , 
    -111.34 ,153.21 ,-64.28 , 
    -111.34 ,153.21 ,-64.28 , 
    -99.35 ,163.83 ,-57.36 , 
    -99.35 ,163.83 ,-57.36 , 
    -86.6 ,173.21 ,-50.0 , 
    -86.6 ,173.21 ,-50.0 , 
    -73.2 ,181.26 ,-42.26 , 
    -73.2 ,181.26 ,-42.26 , 
    -59.24 ,187.94 ,-34.2 , 
    -59.24 ,187.94 ,-34.2 , 
    -44.83 ,193.19 ,-25.88 , 
    -44.83 ,193.19 ,-25.88 , 
    -30.08 ,196.96 ,-17.37 , 
    -30.08 ,196.96 ,-17.37 , 
    -15.09 ,199.24 ,-8.72 , 
    -15.09 ,199.24 ,-8.72 , 
    -0.0 ,200.0 ,-0.0 , 
    -100.0 ,0.0 ,-173.21 , 
    -99.62 ,17.43 ,-172.55 , 
    -99.62 ,17.43 ,-172.55 , 
    -98.48 ,34.73 ,-170.57 , 
    -98.48 ,34.73 ,-170.57 , 
    -96.6 ,51.76 ,-167.31 , 
    -96.6 ,51.76 ,-167.31 , 
    -93.97 ,68.4 ,-162.76 , 
    -93.97 ,68.4 ,-162.76 , 
    -90.63 ,84.52 ,-156.98 , 
    -90.63 ,84.52 ,-156.98 , 
    -86.61 ,100.0 ,-150.0 , 
    -86.61 ,100.0 ,-150.0 , 
    -81.92 ,114.72 ,-141.88 , 
    -81.92 ,114.72 ,-141.88 , 
    -76.61 ,128.56 ,-132.68 , 
    -76.61 ,128.56 ,-132.68 , 
    -70.71 ,141.42 ,-122.47 , 
    -70.71 ,141.42 ,-122.47 , 
    -64.28 ,153.21 ,-111.34 , 
    -64.28 ,153.21 ,-111.34 , 
    -57.36 ,163.83 ,-99.35 , 
    -57.36 ,163.83 ,-99.35 , 
    -50.0 ,173.21 ,-86.6 , 
    -50.0 ,173.21 ,-86.6 , 
    -42.26 ,181.26 ,-73.2 , 
    -42.26 ,181.26 ,-73.2 , 
    -34.2 ,187.94 ,-59.24 , 
    -34.2 ,187.94 ,-59.24 , 
    -25.88 ,193.19 ,-44.83 , 
    -25.88 ,193.19 ,-44.83 , 
    -17.37 ,196.96 ,-30.08 , 
    -17.37 ,196.96 ,-30.08 , 
    -8.72 ,199.24 ,-15.09 , 
    -8.72 ,199.24 ,-15.09 , 
    -0.0 ,200.0 ,-0.0 , 
    -0.0 ,0.0 ,-200.0 , 
    -0.0 ,17.43 ,-199.24 , 
    -0.0 ,17.43 ,-199.24 , 
    -0.0 ,34.73 ,-196.96 , 
    -0.0 ,34.73 ,-196.96 , 
    -0.0 ,51.76 ,-193.19 , 
    -0.0 ,51.76 ,-193.19 , 
    -0.0 ,68.4 ,-187.94 , 
    -0.0 ,68.4 ,-187.94 , 
    -0.0 ,84.52 ,-181.26 , 
    -0.0 ,84.52 ,-181.26 , 
    -0.0 ,100.0 ,-173.21 , 
    -0.0 ,100.0 ,-173.21 , 
    -0.0 ,114.72 ,-163.83 , 
    -0.0 ,114.72 ,-163.83 , 
    -0.0 ,128.56 ,-153.21 , 
    -0.0 ,128.56 ,-153.21 , 
    -0.0 ,141.42 ,-141.42 , 
    -0.0 ,141.42 ,-141.42 , 
    -0.0 ,153.21 ,-128.56 , 
    -0.0 ,153.21 ,-128.56 , 
    -0.0 ,163.83 ,-114.72 , 
    -0.0 ,163.83 ,-114.72 , 
    -0.0 ,173.21 ,-100.0 , 
    -0.0 ,173.21 ,-100.0 , 
    -0.0 ,181.26 ,-84.52 , 
    -0.0 ,181.26 ,-84.52 , 
    -0.0 ,187.94 ,-68.4 , 
    -0.0 ,187.94 ,-68.4 , 
    -0.0 ,193.19 ,-51.76 , 
    -0.0 ,193.19 ,-51.76 , 
    -0.0 ,196.96 ,-34.73 , 
    -0.0 ,196.96 ,-34.73 , 
    -0.0 ,199.24 ,-17.43 , 
    -0.0 ,199.24 ,-17.43 , 
    -0.0 ,200.0 ,-0.0 , 
    100.0 ,0.0 ,-173.21 , 
    99.62 ,17.43 ,-172.55 , 
    99.62 ,17.43 ,-172.55 , 
    98.48 ,34.73 ,-170.57 , 
    98.48 ,34.73 ,-170.57 , 
    96.6 ,51.76 ,-167.31 , 
    96.6 ,51.76 ,-167.31 , 
    93.97 ,68.4 ,-162.76 , 
    93.97 ,68.4 ,-162.76 , 
    90.63 ,84.52 ,-156.98 , 
    90.63 ,84.52 ,-156.98 , 
    86.61 ,100.0 ,-150.0 , 
    86.61 ,100.0 ,-150.0 , 
    81.92 ,114.72 ,-141.88 , 
    81.92 ,114.72 ,-141.88 , 
    76.61 ,128.56 ,-132.68 , 
    76.61 ,128.56 ,-132.68 , 
    70.71 ,141.42 ,-122.47 , 
    70.71 ,141.42 ,-122.47 , 
    64.28 ,153.21 ,-111.34 , 
    64.28 ,153.21 ,-111.34 , 
    57.36 ,163.83 ,-99.35 , 
    57.36 ,163.83 ,-99.35 , 
    50.0 ,173.21 ,-86.6 , 
    50.0 ,173.21 ,-86.6 , 
    42.26 ,181.26 ,-73.2 , 
    42.26 ,181.26 ,-73.2 , 
    34.2 ,187.94 ,-59.24 , 
    34.2 ,187.94 ,-59.24 , 
    25.88 ,193.19 ,-44.83 , 
    25.88 ,193.19 ,-44.83 , 
    17.37 ,196.96 ,-30.08 , 
    17.37 ,196.96 ,-30.08 , 
    8.72 ,199.24 ,-15.09 , 
    8.72 ,199.24 ,-15.09 , 
    0.0 ,200.0 ,-0.0 , 
    173.21 ,0.0 ,-100.0 , 
    172.55 ,17.43 ,-99.62 , 
    172.55 ,17.43 ,-99.62 , 
    170.57 ,34.73 ,-98.48 , 
    170.57 ,34.73 ,-98.48 , 
    167.31 ,51.76 ,-96.6 , 
    167.31 ,51.76 ,-96.6 , 
    162.76 ,68.4 ,-93.97 , 
    162.76 ,68.4 ,-93.97 , 
    156.98 ,84.52 ,-90.63 , 
    156.98 ,84.52 ,-90.63 , 
    150.0 ,100.0 ,-86.61 , 
    150.0 ,100.0 ,-86.61 , 
    141.88 ,114.72 ,-81.92 , 
    141.88 ,114.72 ,-81.92 , 
    132.68 ,128.56 ,-76.61 , 
    132.68 ,128.56 ,-76.61 , 
    122.47 ,141.42 ,-70.71 , 
    122.47 ,141.42 ,-70.71 , 
    111.34 ,153.21 ,-64.28 , 
    111.34 ,153.21 ,-64.28 , 
    99.35 ,163.83 ,-57.36 , 
    99.35 ,163.83 ,-57.36 , 
    86.6 ,173.21 ,-50.0 , 
    86.6 ,173.21 ,-50.0 , 
    73.2 ,181.26 ,-42.26 , 
    73.2 ,181.26 ,-42.26 , 
    59.24 ,187.94 ,-34.2 , 
    59.24 ,187.94 ,-34.2 , 
    44.83 ,193.19 ,-25.88 , 
    44.83 ,193.19 ,-25.88 , 
    30.08 ,196.96 ,-17.37 , 
    30.08 ,196.96 ,-17.37 , 
    15.09 ,199.24 ,-8.72 , 
    15.09 ,199.24 ,-8.72 , 
    0.0 ,200.0 ,-0.0 , 
    200.0 ,0.0 ,-0.0 , 
    199.24 ,17.43 ,-0.0 , 
    199.24 ,17.43 ,-0.0 , 
    196.96 ,34.73 ,-0.0 , 
    196.96 ,34.73 ,-0.0 , 
    193.19 ,51.76 ,-0.0 , 
    193.19 ,51.76 ,-0.0 , 
    187.94 ,68.4 ,-0.0 , 
    187.94 ,68.4 ,-0.0 , 
    181.26 ,84.52 ,-0.0 , 
    181.26 ,84.52 ,-0.0 , 
    173.21 ,100.0 ,-0.0 , 
    173.21 ,100.0 ,-0.0 , 
    163.83 ,114.72 ,-0.0 , 
    163.83 ,114.72 ,-0.0 , 
    153.21 ,128.56 ,-0.0 , 
    153.21 ,128.56 ,-0.0 , 
    141.42 ,141.42 ,-0.0 , 
    141.42 ,141.42 ,-0.0 , 
    128.56 ,153.21 ,-0.0 , 
    128.56 ,153.21 ,-0.0 , 
    114.72 ,163.83 ,-0.0 , 
    114.72 ,163.83 ,-0.0 , 
    100.0 ,173.21 ,-0.0 , 
    100.0 ,173.21 ,-0.0 , 
    84.52 ,181.26 ,-0.0 , 
    84.52 ,181.26 ,-0.0 , 
    68.4 ,187.94 ,-0.0 , 
    68.4 ,187.94 ,-0.0 , 
    51.76 ,193.19 ,-0.0 , 
    51.76 ,193.19 ,-0.0 , 
    34.73 ,196.96 ,-0.0 , 
    34.73 ,196.96 ,-0.0 , 
    17.43 ,199.24 ,-0.0 , 
    17.43 ,199.24 ,-0.0 , 
    0.0 ,200.0 ,-0.0 , 
    
    //merge grid vertex with hemisphere vertex
    ,200 ,0 ,-200, 
	 ,-200 ,0 ,-200, 
	 ,200 ,0 ,-180, 
	 ,-200 ,0 ,-180, 
	 ,200 ,0 ,-160, 
	 ,-200 ,0 ,-160, 
	 ,200 ,0 ,-140, 
	 ,-200 ,0 ,-140, 
	 ,200 ,0 ,-120, 
	 ,-200 ,0 ,-120, 
	 ,200 ,0 ,-100, 
	 ,-200 ,0 ,-100, 
	 ,200 ,0 ,-80, 
	 ,-200 ,0 ,-80, 
	 ,200 ,0 ,-60, 
	 ,-200 ,0 ,-60, 
	 ,200 ,0 ,-40, 
	 ,-200 ,0 ,-40, 
	 ,200 ,0 ,-20, 
	 ,-200 ,0 ,-20, 
	 ,200 ,0 ,0, 
	 ,-200 ,0 ,0, 
	 ,200 ,0 ,20, 
	 ,-200 ,0 ,20, 
	 ,200 ,0 ,40, 
	 ,-200 ,0 ,40, 
	 ,200 ,0 ,60, 
	 ,-200 ,0 ,60, 
	 ,200 ,0 ,80, 
	 ,-200 ,0 ,80, 
	 ,200 ,0 ,100, 
	 ,-200 ,0 ,100, 
	 ,200 ,0 ,120, 
	 ,-200 ,0 ,120, 
	 ,200 ,0 ,140, 
	 ,-200 ,0 ,140, 
	 ,200 ,0 ,160, 
	 ,-200 ,0 ,160, 
	 ,200 ,0 ,180, 
	 ,-200 ,0 ,180, 
	 ,200 ,0 ,200, 
	 ,-200 ,0 ,200, 
	 ,-200 ,0 ,200, 
	 ,-200 ,0 ,-200, 
	 ,-180 ,0 ,200, 
	 ,-180 ,0 ,-200, 
	 ,-160 ,0 ,200, 
	 ,-160 ,0 ,-200, 
	 ,-140 ,0 ,200, 
	 ,-140 ,0 ,-200, 
	 ,-120 ,0 ,200, 
	 ,-120 ,0 ,-200, 
	 ,-100 ,0 ,200, 
	 ,-100 ,0 ,-200, 
	 ,-80 ,0 ,200, 
	 ,-80 ,0 ,-200, 
	 ,-60 ,0 ,200, 
	 ,-60 ,0 ,-200, 
	 ,-40 ,0 ,200, 
	 ,-40 ,0 ,-200, 
	 ,-20 ,0 ,200, 
	 ,-20 ,0 ,-200, 
	 ,0 ,0 ,200, 
	 ,0 ,0 ,-200, 
	 ,20 ,0 ,200, 
	 ,20 ,0 ,-200, 
	 ,40 ,0 ,200, 
	 ,40 ,0 ,-200, 
	 ,60 ,0 ,200, 
	 ,60 ,0 ,-200, 
	 ,80 ,0 ,200, 
	 ,80 ,0 ,-200, 
	 ,100 ,0 ,200, 
	 ,100 ,0 ,-200, 
	 ,120 ,0 ,200, 
	 ,120 ,0 ,-200, 
	 ,140 ,0 ,200, 
	 ,140 ,0 ,-200, 
	 ,160 ,0 ,200, 
	 ,160 ,0 ,-200, 
	 ,180 ,0 ,200, 
	 ,180 ,0 ,-200, 
	 ,200 ,0 ,200, 
	 ,200 ,0 ,-200,
  
    ],
    color : [
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    0,0,0, 
    ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0, 
	 ,0 ,0 ,0,
    ] ,
    //before 612 after 612 + 84 = 696 
    number :  696  ,
    type : "LINES",
    };
     	 
    var Grid = {
      vertex : [
        -250,0,250,
        250,0,250,
        -250,0,200,
        250,0,200,
        -250,0,150,
        250,0,150,
        -250,0,100,
        250,0,100,
        -250,0,50,
        250,0,50,
        -250,0,0,
        250,0,0,
        -250,0,-50,
        250,0,-50,
        -250,0,-100,
        250,0,-100,
        -250,0,-150,
        250,0,-150,
        -250,0,-200,
        250,0,-200,
        -250,0,-250,
        250,0,-250,
        //Z 
        250,0,250,
        250,0,-250,
        200,0,250,
        200,0,-250,
        150,0,250,
        150,0,-250,
        100,0,250,
        100,0,-250,
        50,0,250,
        50,0,-250,
        0,0,250,
        0,0,-250,
        -50,0,250,
        -50,0,-250,
        -100,0,250,
        -100,0,-250,
        -150,0,250,
        -150,0,-250,
        -200,0,250,
        -200,0,-250,
        -250,0,250,
        -250,0,-250,
      ],

      color : [
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        //Z
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
        0,0.2,0,
      ],
      number : 44,
      type : "LINES",
   };

  var Triangle = {
    vertex :  [100,0,0,
              0,0,-50,
              0,0,50,],
    color : [0,1,1,
            0,1,0.7,
            1,0,0],
    number : 64,
    type : "TRIANGLES"
  };

  var Axis = {
    vertex : [500,0,0,
              -500,0,0,
              0,500,0,
              0,-500,0,
              0,0,500,
              0,0,-500,
            ],
    color : [0.2,1,0.2,
              0.2,1,0.2,
              1,0.2,0.2,
              1,0.2,0.2,
              0,1,0,
              0,1,0,
            ],
    number : 6,
    type : "LINES",
  };
  /*
  var xmlhttp = new XMLHttpRequest();
  xmlhttp.onreadystatechange = function()
  {
    if (this.readyState == 4 && this.status == 200)
    {
      var myObj = JSON.parse(this.responseText);
      alert(myObj);
    }
  };
  xmlhttp.open('GET', "static/celes.json",true);
  xmlhttp.send();
  */
  
  var celes = [45,120]
  var xyz = AltAlztopoint(celes[0],celes[1]);

  var Points = {
    vertex  : xyz,
    color   : [0,0.3,0.3],
    number  : 1,
    type    : 'POINTS',
  };

  
  // Get A WebGL context
  /** @type {HTMLCanvasElement} */
  var canvas = document.querySelector("#canvas");
  var gl = canvas.getContext("webgl");
  if (!gl)  {
    alert("no webgl");
    return;
  }

  var program = webglUtils.createProgramFromScripts(gl, ["vertex-shader-3d", "fragment-shader-3d"]);

  // look up where the vertex data needs to go.
  var positionLocation = gl.getAttribLocation(program, "a_position");
  var colorLocation = gl.getAttribLocation(program, "a_color");

  // lookup uniforms
  var matrixLocation = gl.getUniformLocation(program, "u_matrix");
  var uColorLocation = gl.getUniformLocation(program, "u_colorMulti");

  var Location = {
    position : positionLocation,
    color : colorLocation,
    matrix : matrixLocation,
  };
  
  //create UI
  webglLessonsUI.setupSlider("#RA", {value: celes[0], slide: updateRA, max: 360, step: 1, precision: 3 });

  function updateRA() {
    return function(event, ui) {
      celes[0] = ui.value;
      animate(0);
    };
  }
  /*================= Mouse events ======================*/

  var AMORTIZATION = 0.95;
  var drag = false;
  var old_x, old_y;
  var dX = 0, dY = 0;

  var mouseDown = function(e) {
     drag = true;
     old_x = e.pageX, old_y = e.pageY;
     e.preventDefault();
     return false;
  };

  var mouseUp = function(e){
     drag = false;
  };

  var mouseMove = function(e) {
     if (!drag) return false;
     dX = (e.pageX-old_x)*2*Math.PI/canvas.width,
     dY = (e.pageY-old_y)*2*Math.PI/canvas.height;
     THETA+= dX;
     PHI+=dY;
     old_x = e.pageX, old_y = e.pageY;
     e.preventDefault();
  };

  canvas.addEventListener("mousedown", mouseDown, false);
  canvas.addEventListener("mouseup", mouseUp, false);
  canvas.addEventListener("mouseout", mouseUp, false);
  canvas.addEventListener("mousemove", mouseMove, false);

  var THETA = 0;
  var PHI = 0;
  var time_old = 0;
  var Y = 100;
  animate(0);


  function animate(time)  {
    var dt = time - time_old;
    if (!drag) {
      dX *= AMORTIZATION, dY*=AMORTIZATION;
      THETA+=dX, PHI+=dY;
      Y = 250 * Math.sin(PHI);
    }
    
   
    gl.useProgram(program);
    webglUtils.resizeCanvasToDisplaySize(gl.canvas);
    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.enable(gl.CULL_FACE);
    gl.enable(gl.DEPTH_TEST);

    //Uniform setup
    var aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
    var fieldOfViewRadians = degToRad(50);
    var projectionMatrix = 
    m4.perspective(fieldOfViewRadians, aspect, 1, 2000);

    var firstPosition = [0,0,0];
  
    var cameraPosition = [
      700,200 + Y ,0
    ];
    
  
    var up = [0,1,0];
    var cameraMatrix = m4.lookAt(cameraPosition, firstPosition, up);
    var viewMatrix = m4.inverse(cameraMatrix);
    var modifiedMatrix = m4.identity();
    modifiedMatrix = m4.yRotate(modifiedMatrix, THETA);
    //modifiedMatrix = m4.xRotate(modifiedMatrix, PHI);
    var viewProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);
    var matrix = m4.translate(viewProjectionMatrix, 0, 0, 0);
    matrix = m4.multiply(matrix,modifiedMatrix);
    

    time_old = time;

    //using the program
    gl.useProgram(program);

    //draw Hemisphere
    drawObject(gl, Hemisphere, Location, matrix);
    //draw Grid
    drawObject(gl, Grid, Location, matrix);
    //draw Triangle
    drawObject(gl, Triangle, Location, matrix);
    //draw Axis
    drawObject(gl, Axis, Location, matrix);
    //drawPoints
    drawObject(gl, Points, Location, matrix);
    window.requestAnimationFrame(animate);




  }

  function drawObject(gl, object, Location, matrix) {
    //using switch to indicate drawArray type
    var type;
    
    switch(object.type) {
      case "TRIANGLES":
        type = gl.TRIANGLES;
        break;
      case "LINES":
        type = gl.LINES;
        break;
      case "POINTS":
        type = gl.POINTS;
        break;
    }
  
    var vertexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(object.vertex), gl.STATIC_DRAW);
    var colorBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(object.color), gl.STATIC_DRAW);
    gl.enableVertexAttribArray(Location.position);
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.vertexAttribPointer(
      Location.position, 3, gl.FLOAT, false, 0, 0  );
    gl.enableVertexAttribArray(Location.color);
    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
    gl.vertexAttribPointer(
      Location.color, 3, gl.UNSIGNED_BYTE, true,0 ,0  );
    gl.uniformMatrix4fv(Location.matrix, false, matrix);
    gl.drawArrays(type ,0 , object.number);
 
  }

}



function AltAlztopoint(alt,alz) {
  var alt = degToRad(alt);
  var alz = degToRad(alz);
  var y = 200 * Math.sin(alt);
  var x = 200 * Math.cos(alt) * Math.cos(alz);
  var z = 200 * Math.cos(alt) * Math.sin(alz);
  return [x,y,z];
}






function computeMatrix(viewProjectionMatrix, translation, xRotation, yRotation) {
    var matrix = m4.translate(viewProjectionMatrix,
        translation[0],
        translation[1],
        translation[2]);
    matrix = m4.xRotate(matrix, xRotation);
    return m4.yRotate(matrix, yRotation);
  }

function degToRad(d) {
  return d * Math.PI / 180;
}

function subtractVectors(a, b) {
  return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];
}

function normalize(v) {
  var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  // make sure we don't divide by 0.
  if (length > 0.00001) {
    return [v[0] / length, v[1] / length, v[2] / length];
  } else {
    return [0, 0, 0];
  }
}

function cross(a, b) {
  return [a[1] * b[2] - a[2] * b[1],
          a[2] * b[0] - a[0] * b[2],
          a[0] * b[1] - a[1] * b[0]];
}

var m4 = {

  lookAt: function(cameraPosition, target, up) {
    var zAxis = normalize(
        subtractVectors(cameraPosition, target));
    var xAxis = normalize(cross(up, zAxis));
    var yAxis = normalize(cross(zAxis, xAxis));

    return [
       xAxis[0], xAxis[1], xAxis[2], 0,
       yAxis[0], yAxis[1], yAxis[2], 0,
       zAxis[0], zAxis[1], zAxis[2], 0,
       cameraPosition[0],
       cameraPosition[1],
       cameraPosition[2],
       1,
    ];
  },

  perspective: function(fieldOfViewInRadians, aspect, near, far) {
    var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewInRadians);
    var rangeInv = 1.0 / (near - far);

    return [
      f / aspect, 0, 0, 0,
      0, f, 0, 0,
      0, 0, (near + far) * rangeInv, -1,
      0, 0, near * far * rangeInv * 2, 0
    ];
  },

  projection: function(width, height, depth) {
    // Note: This matrix flips the Y axis so 0 is at the top.
    return [
       2 / width, 0, 0, 0,
       0, -2 / height, 0, 0,
       0, 0, 2 / depth, 0,
      -1, 1, 0, 1,
    ];
  },

  multiply: function(a, b) {
    var a00 = a[0 * 4 + 0];
    var a01 = a[0 * 4 + 1];
    var a02 = a[0 * 4 + 2];
    var a03 = a[0 * 4 + 3];
    var a10 = a[1 * 4 + 0];
    var a11 = a[1 * 4 + 1];
    var a12 = a[1 * 4 + 2];
    var a13 = a[1 * 4 + 3];
    var a20 = a[2 * 4 + 0];
    var a21 = a[2 * 4 + 1];
    var a22 = a[2 * 4 + 2];
    var a23 = a[2 * 4 + 3];
    var a30 = a[3 * 4 + 0];
    var a31 = a[3 * 4 + 1];
    var a32 = a[3 * 4 + 2];
    var a33 = a[3 * 4 + 3];
    var b00 = b[0 * 4 + 0];
    var b01 = b[0 * 4 + 1];
    var b02 = b[0 * 4 + 2];
    var b03 = b[0 * 4 + 3];
    var b10 = b[1 * 4 + 0];
    var b11 = b[1 * 4 + 1];
    var b12 = b[1 * 4 + 2];
    var b13 = b[1 * 4 + 3];
    var b20 = b[2 * 4 + 0];
    var b21 = b[2 * 4 + 1];
    var b22 = b[2 * 4 + 2];
    var b23 = b[2 * 4 + 3];
    var b30 = b[3 * 4 + 0];
    var b31 = b[3 * 4 + 1];
    var b32 = b[3 * 4 + 2];
    var b33 = b[3 * 4 + 3];
    return [
      b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30,
      b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31,
      b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32,
      b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33,
      b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30,
      b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31,
      b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32,
      b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33,
      b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30,
      b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31,
      b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32,
      b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33,
      b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30,
      b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31,
      b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32,
      b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33,
    ];
  },

  translation: function(tx, ty, tz) {
    return [
       1,  0,  0,  0,
       0,  1,  0,  0,
       0,  0,  1,  0,
       tx, ty, tz, 1,
    ];
  },

  xRotation: function(angleInRadians) {
    var c = Math.cos(angleInRadians);
    var s = Math.sin(angleInRadians);

    return [
      1, 0, 0, 0,
      0, c, s, 0,
      0, -s, c, 0,
      0, 0, 0, 1,
    ];
  },

  yRotation: function(angleInRadians) {
    var c = Math.cos(angleInRadians);
    var s = Math.sin(angleInRadians);

    return [
      c, 0, -s, 0,
      0, 1, 0, 0,
      s, 0, c, 0,
      0, 0, 0, 1,
    ];
  },

  zRotation: function(angleInRadians) {
    var c = Math.cos(angleInRadians);
    var s = Math.sin(angleInRadians);

    return [
       c, s, 0, 0,
      -s, c, 0, 0,
       0, 0, 1, 0,
       0, 0, 0, 1,
    ];
  },

  scaling: function(sx, sy, sz) {
    return [
      sx, 0,  0,  0,
      0, sy,  0,  0,
      0,  0, sz,  0,
      0,  0,  0,  1,
    ];
  },

  translate: function(m, tx, ty, tz) {
    return m4.multiply(m, m4.translation(tx, ty, tz));
  },

  xRotate: function(m, angleInRadians) {
    return m4.multiply(m, m4.xRotation(angleInRadians));
  },

  yRotate: function(m, angleInRadians) {
    return m4.multiply(m, m4.yRotation(angleInRadians));
  },

  zRotate: function(m, angleInRadians) {
    return m4.multiply(m, m4.zRotation(angleInRadians));
  },

  scale: function(m, sx, sy, sz) {
    return m4.multiply(m, m4.scaling(sx, sy, sz));
  },

  inverse: function(m) {
    var m00 = m[0 * 4 + 0];
    var m01 = m[0 * 4 + 1];
    var m02 = m[0 * 4 + 2];
    var m03 = m[0 * 4 + 3];
    var m10 = m[1 * 4 + 0];
    var m11 = m[1 * 4 + 1];
    var m12 = m[1 * 4 + 2];
    var m13 = m[1 * 4 + 3];
    var m20 = m[2 * 4 + 0];
    var m21 = m[2 * 4 + 1];
    var m22 = m[2 * 4 + 2];
    var m23 = m[2 * 4 + 3];
    var m30 = m[3 * 4 + 0];
    var m31 = m[3 * 4 + 1];
    var m32 = m[3 * 4 + 2];
    var m33 = m[3 * 4 + 3];
    var tmp_0  = m22 * m33;
    var tmp_1  = m32 * m23;
    var tmp_2  = m12 * m33;
    var tmp_3  = m32 * m13;
    var tmp_4  = m12 * m23;
    var tmp_5  = m22 * m13;
    var tmp_6  = m02 * m33;
    var tmp_7  = m32 * m03;
    var tmp_8  = m02 * m23;
    var tmp_9  = m22 * m03;
    var tmp_10 = m02 * m13;
    var tmp_11 = m12 * m03;
    var tmp_12 = m20 * m31;
    var tmp_13 = m30 * m21;
    var tmp_14 = m10 * m31;
    var tmp_15 = m30 * m11;
    var tmp_16 = m10 * m21;
    var tmp_17 = m20 * m11;
    var tmp_18 = m00 * m31;
    var tmp_19 = m30 * m01;
    var tmp_20 = m00 * m21;
    var tmp_21 = m20 * m01;
    var tmp_22 = m00 * m11;
    var tmp_23 = m10 * m01;

    var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -
        (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);
    var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -
        (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);
    var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -
        (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);
    var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -
        (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);

    var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);

    return [
      d * t0,
      d * t1,
      d * t2,
      d * t3,
      d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -
            (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30)),
      d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -
            (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30)),
      d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -
            (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30)),
      d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -
            (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20)),
      d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -
            (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33)),
      d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -
            (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33)),
      d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -
            (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33)),
      d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -
            (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23)),
      d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -
            (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22)),
      d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -
            (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02)),
      d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -
            (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12)),
      d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -
            (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02))
    ];
  },

  vectorMultiply: function(v, m) {
    var dst = [];
    for (var i = 0; i < 4; ++i) {
      dst[i] = 0.0;
      for (var j = 0; j < 4; ++j) {
        dst[i] += v[j] * m[j * 4 + i];
      }
    }
    return dst;
  },

  identity: function()  {
    return[
      1,0,0,0,
      0,1,0,0,
      0,0,1,0,
      0,0,0,1,
    ];
  }

};

$(function(){
  main();
  
});